plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin" // Ensure this plugin is applied for Flutter integration.
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode', '1')
def flutterVersionName = localProperties.getProperty('flutter.versionName', '1.0')

android {
    namespace "com.example.ibm_test"

    // It's best to explicitly set your compileSdkVersion to the latest stable version or at least ensure compatibility with ARCore.
    compileSdkVersion flutter.compileSdkVersion // Assuming this is set to an appropriate value in your Flutter configuration.
    compileSdkVersion 34

    // If flutter.ndkVersion is not set or you want to specify it, do so here.
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.ibm_test"
        minSdkVersion 24 // Set your minimum SDK version to 24 for ARCore compatibility.
        targetSdkVersion flutter.targetSdkVersion // Ensure this targets a version compatible with your app's requirements.
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // Consider configuring your own signing configuration for release builds.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.ar:core:1.33.0' // ARCore dependency, make sure to use the latest version or the one that suits your needs.

    // As of my last update, Sceneform is not actively maintained by Google and might require using a community-maintained version for newer features or fixes.
    // Ensure these versions are compatible with your project setup.
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.8.0'
    implementation 'com.google.ar.sceneform:core:1.8.0'
}
